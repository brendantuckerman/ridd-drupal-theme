{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *  -bg_image: Path to image location for use in css background
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'flex flex-col sm:flex-row w-full items-center justify-center gap-8 py-8 my-8',
     paragraph.field_shaded_background.0.value ? 'bg-secondary-grey' : 'bg-white'
  ]
%}

{% block paragraph %}

{# Set class name based on shape selection #}
   {% if paragraph.field_large_card_image_shape.value == 'default' %}
	{% set shapeClass='large-card-square' %}
  {% elseif paragraph.field_large_card_image_shape.value == 'circle' %}
       {% set shapeClass='rounded-full large-card-circle' %}
  {% elseif paragraph.field_large_card_image_shape.value == 'top_right_circle' %}
       {% set shapeClass='large-card-top-right-circle' %}
  {% elseif paragraph.field_large_card_image_shape.value == 'top_left_circle' %}
       {% set shapeClass='large-card-top-left-circle' %}
  {% elseif  paragraph.field_large_card_image_shape.value  == 'bottom_right_circle' %}
       {% set shapeClass='large-card-bottom-right-circle' %}
  {% elseif paragraph.field_large_card_image_shape.value == 'bottom_left_circle' %}
	{% set shapeClass='large-card-bottom-left-circle' %}
{% endif %}

  <div{{ attributes.addClass(classes) }}>
    {% block content %}
    {# Image first #}
    {% if paragraph.field_image_orientation.value %}
    <div class="large-card-text-wrapper px-8 sm:px-2">
     <div class="text-4xl prose">
        {{ content.field_title }}
      </div>
       <div class="prose">
      {{ content.field_body}}
        </div>
    </div>
    <div class="large-card-shape-wrapper relative">
      <div style="background-image: url({{ bg_image }})"
      class="{{shapeClass}} w-96 h-96 bg-cover bg-center">
      </div>
     <div class="{{shapeClass}}-internal"></div>
    </div>

    {# Image after #}
    {% else %}
  <div class="large-card-shape-wrapper relative">
    <div style="background-image: url({{ bg_image }})"
         class="{{shapeClass}} w-96 h-96 bg-cover bg-center shadow-md/50">
    </div>
    <div class="{{shapeClass}}-internal"></div>
  </div>
  <div class="large-card-text-wrapper px-8 sm:px-2">
    <div class="text-4xl prose">
      {{ content.field_title }}
    </div>
    <div class="prose">
      {{ content.field_body}}
    </div>
  </div>
    {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
